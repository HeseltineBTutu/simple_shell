#!/bin/bash

# Test function to run a command and compare its output with the expected output
run_test() {
    local input="$1"
    local expected_output="$2"
    local description="$3"

    echo -e "Test: $description"
    echo -e "Input: $input"

    # Run the command and capture the actual output
    actual_output=$(./hsh <<< "$input")

    if [ "$actual_output" == "$expected_output" ]; then
        echo -e "Result: \033[0;32mPASSED\033[0m"
        ((tests_passed++))
    else
        echo -e "Result: \033[0;31mFAILED\033[0m"
        echo -e "Expected Output: $expected_output"
        echo -e "Actual Output : $actual_output"
        ((tests_failed++))
    fi

    echo -e "-----------------------------------\n"
}

# Initialize variables
tests_passed=0
tests_failed=0

# Run a series of tests

# Basic Command Execution
run_test "ls" "$(ls)" "Basic Command Execution"

# Non-Existent Command
run_test "nonexistentcommand" "Command not found: nonexistentcommand" "Non-Existent Command"

# Command in PATH
run_test "echo Hello" "Hello" "Command in PATH"

# Empty Command
run_test "" "" "Empty Command"

# Commands with Arguments
run_test "echo Argument1 Argument2" "Argument1 Argument2" "Commands with Arguments"

# Multiple Commands in a Row
run_test "ls ; echo Hello ; pwd" "$(ls)\nHello\n$(pwd)" "Multiple Commands in a Row"

# Command with Absolute Path
run_test "/bin/ls" "$(ls)" "Command with Absolute Path"

# Additional Tests...

# Test Case: Running a non-existent shell script
run_test "./nonexistent_script.sh" "No such file or directory" "Running Non-Existent Shell Script"

# Test Case: Running a command with incorrect syntax
run_test "echo 'Missing Single Quote" "bash: unexpected EOF while looking for matching" "Command with Incorrect Syntax"

# End of Tests
echo -e "\n==== Test Results ===="
echo -e "Total tests: $((tests_passed + tests_failed))"
echo -e "Tests passed: \033[0;32m$tests_passed\033[0m"
echo -e "Tests failed: \033[0;31m$tests_failed\033[0m"

# Exit with an appropriate status code
if [ "$tests_failed" -eq 0 ]; then
    exit 0
else
    exit 1
fi

